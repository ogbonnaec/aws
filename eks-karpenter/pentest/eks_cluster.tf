resource "aws_vpc" "eks_vpc" {
  cidr_block = "10.0.0.0/16"
}


resource "aws_subnet" "eks_vpc_subnet" {
  vpc_id            = aws_vpc.eks_vpc.id
  cidr_block        = "10.0.1.0/25"
 # availability_zone = "eu-central-1c"

  tags = {
    Name = "Public Subnet"
  }
}

resource "aws_security_group" "eks_security_group" {
  name        = "eks_SG"
  description = "EKS Security Group"
  vpc_id      = aws_vpc.eks_vpc.id

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_eks_cluster" "my_cluster" {
  name = "my-eks-cluster"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids = [aws_subnet.eks_vpc_subnet.id]
  }

  depends_on = [aws_iam_role_policy_attachment.eks_cluster]
}

resource "aws_iam_role" "eks_cluster_role" {
  name = "eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role = aws_iam_role.eks_cluster_role.name
}

resource "aws_iam_role_policy" "eks_nodegroup_policy" {
  name = "eks-nodegroup-policy"
  role = aws_iam_role.eks_cluster_role.name

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "eks:DescribeNodegroup",
          "eks:ListNodegroups",
          "eks:CreateNodegroup",
          "eks:DeleteNodegroup",
        ],
        Resource = "*",
      }
    ],
  })
}

resource "aws_launch_configuration" "my_lc" {
  name_prefix = "my-lc-"
  image_id = "ami-0ad9796167d61b7ae"
  instance_type  = "t2.micro" # <<  instance_type = "t2.micro"
  security_groups = [aws_security_group.eks_security_group.id] # << Change here 

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "my_asg" {
  name = "my-asg"
  launch_configuration = aws_launch_configuration.my_lc.name
  min_size = 2
  max_size = 2
  desired_capacity = 2

  vpc_zone_identifier = [aws_subnet.eks_vpc_subnet.id, "subnet-a5f1e4cc"] # <<< Needs change to our subnet id 
}

resource "aws_iam_role" "node-group-role" {
  name = "vm-stop-start"
  managed_policy_arns = [aws_iam_policy.node-group-policy.arn]
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      },
    ]
  })
}

resource "aws_iam_policy" "node-group-policy" {
  name = "lambda-vm-stop-start"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = ["ec2:*"]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
 }

resource "aws_eks_node_group" "my_node_group" {
  cluster_name    = aws_eks_cluster.my_cluster.name
  node_group_name = "my-node-group"
  subnet_ids      = [aws_subnet.eks_vpc_subnet.id]  # Use the same subnet as the EKS cluster
  instance_types  = ["t2.micro"]  # Specify the instance type(s) you want to use
  node_role_arn = aws_iam_policy.node-group-policy.arn
  scaling_config {
    desired_size = 2
    min_size     = 2
    max_size     = 2
  }
}